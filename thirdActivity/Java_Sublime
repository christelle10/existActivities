import java.util.*;
import java.util.concurrent.*;
import java.util.stream.Collectors;

class HorseGame {
    String name;
    String warcry;
    int age;
    String condition;
    int speed;
    int totalDistance = 0;
    String group;

    public HorseGame(String name, String warcry, int age) {
        this.name = name;
        this.warcry = warcry;
        this.age = age;
        this.condition = Math.random() > 0.2 ? "Healthy" : "Unhealthy"; // 80% chance to be healthy
        this.speed = (int) (Math.random() * 10) + 1; // Initial speed between 1-10
    }

    public void assignGroup(Map<String, Long> ageGroups) {
        if (ageGroups.getOrDefault("Advanced", 0L) > 0) {
            this.group = "Advanced";
        } else if (age > (ageGroups.getOrDefault("Beginner", 0L) + ageGroups.getOrDefault("Intermediate", 0L)) / 2) {
            this.group = "Intermediate";
        } else {
            this.group = "Beginner";
        }
    }

    public void race(int distance, int generation) {
        if ("Advanced".equals(this.group) && generation >= 3) {
            this.speed = Math.max(5, this.speed); // Change speed range after 3 generations
        }
        if ("Intermediate".equals(this.group) && generation >= 5) {
            this.speed = (int) (this.speed * 1.1); // 10% increase after 5 generations
        }
        this.totalDistance += this.speed;

        // Print the running status
        System.out.printf("%s ran %d, remaining %d\n", this.name, this.speed, distance - this.totalDistance);
    }

    public boolean isFinished(int distance) {
        return this.totalDistance >= distance;
    }

    public String getWarcry() {
        return this.warcry;
    }

    public String getName() {
        return this.name;
    }
}

public class HorseRace {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);

        // Ask user for number of horses
        System.out.print("Insert number of horse: ");
        int numHorses = scanner.nextInt();
        scanner.nextLine();  // Consume the newline character

        List<Horse> horses = new ArrayList<>();
        Map<Integer, Integer> ageCountMap = new HashMap<>();

        // Input horse information
        for (int i = 1; i <= numHorses; i++) {
            System.out.println("Horse " + i + " Information");
            System.out.print("Name: ");
            String name = scanner.nextLine();
            System.out.print("Warcry: ");
            String warcry = scanner.nextLine();
            System.out.print("Age: ");
            int age = scanner.nextInt();
            scanner.nextLine();  // Consume the newline character

            Horse horse = new Horse(name, warcry, age);
            horses.add(horse);

            // Count age for grouping
            ageCountMap.put(age, ageCountMap.getOrDefault(age, 0) + 1);
        }

        // Filter only healthy horses
        List<Horse> healthyHorses = horses.stream().filter(h -> h.condition.equals("Healthy")).collect(Collectors.toList());
        System.out.println(healthyHorses.size() + " Qualified Horse(s): ");
        healthyHorses.forEach(h -> System.out.println(h.getName()));

        // Ask for race track distance
        System.out.print("Race Distance: ");
        int raceDistance = scanner.nextInt();
        scanner.nextLine();  // Consume newline

        // Assign group based on age
        Map<String, Long> ageGroups = ageCountMap.entrySet().stream()
                .collect(Collectors.groupingBy(e -> e.getKey() > 5 ? "Advanced" : e.getKey() > 2 ? "Intermediate" : "Beginner", Collectors.counting()));

        healthyHorses.forEach(h -> h.assignGroup(ageGroups));

        System.out.println("Race Starting in...");
        for (int i = 3; i > 0; i--) {
            System.out.println(i);
            Thread.sleep(1000);
        }

        // Start the race (in parallel)
        ExecutorService executor = Executors.newFixedThreadPool(healthyHorses.size());
        List<Callable<String>> tasks = new ArrayList<>();

        // Start racing
        for (Horse horse : healthyHorses) {
            tasks.add(() -> {
                int generation = 0;
                while (!horse.isFinished(raceDistance)) {
                    generation++;
                    horse.race(raceDistance, generation);
                    Thread.sleep(5000); // Wait for 5 seconds before next speed generation
                }
                return horse.getWarcry() + " - " + horse.getName() + " finished!";
            });
        }

        // Await results
        List<Future<String>> results = executor.invokeAll(tasks);
        executor.shutdown();

        // Wait for all to finish
        for (Future<String> result : results) {
            System.out.println(result.get());
        }

        System.out.println("RACE FINISHED!");
        // Rank horses based on who finished first
        healthyHorses.sort(Comparator.comparingInt(h -> h.totalDistance));

        int rank = 1;
        for (Horse horse : healthyHorses) {
            System.out.println(rank++ + " - " + horse.getName());
        }
    }
}
